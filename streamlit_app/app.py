import streamlit as st
import requests
from PIL import Image
import io
import base64
import json
from streamlit_lottie import st_lottie


BASE_URL = "http://127.0.0.1:8000/api/v1/models"

st.markdown("""
    <style>
        .title {
            font-size: 40px;
            font-weight: bold;
            color: #9dcf86;
            text-align: center;
            margin-top: 20px;
        }
        .subheader {
            font-size: 24px;
            color: #639149;
            font-weight: bold;
            text-align: center;
        }
        .sidebar .sidebar-content {
            background-color: #e1fcef;
        }
        .stButton>button {
            background-color: #255e48;
            color: white;
            font-size: 16px;
            border-radius: 10px;
            padding: 10px;
            transition: background-color 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #5F9EA0;
        }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
title = "üçΩÔ∏è Calorie-Tracker üçΩÔ∏è"
subheader_model = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
subheader_image = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
subheader_prediction = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.markdown(f'<p class="title">{title}</p>', unsafe_allow_html=True)

def load_lottie_from_file(filepath: str):
    with open(filepath, "r") as f:
        return json.load(f)

lottie_animation = load_lottie_from_file("Animation.json")
st_lottie(lottie_animation, height=200)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
st.sidebar.markdown(f"<h2 class='subheader'>{subheader_model}</h2>", unsafe_allow_html=True)
model_id = st.sidebar.selectbox("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", ["detect", "classific"])

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
    try:
        response = requests.post(f"{BASE_URL}/load", params={"model_id": model_id})
        if response.status_code == 200:
            st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        else:
            error_detail = response.json().get("detail", response.text)
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.markdown(f'<p class="subheader">{subheader_image}</p>', unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", type=["jpg", "jpeg", "png"], accept_multiple_files=True
)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if uploaded_files and st.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    files = [("images", (file.name, file.getvalue(), file.type)) for file in uploaded_files]
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        response = requests.post(
            f"{BASE_URL}/predict",
            params={"model_id": model_id},
            files=files
        )
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            predictions = response.json().get("predictions", [])
            
            if not predictions:
                st.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
            else:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.header(subheader_prediction)
                for pred in predictions:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if "class" in pred and "confidence" in pred:
                        st.write(f"**–ö–ª–∞—Å—Å:** {pred['class']}")
                        st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pred['confidence'] * 100:.2f}%")
                        
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    if "image" in pred:
                        image_data = pred["image"]  # Base64 —Å—Ç—Ä–æ–∫–∞
                        image_bytes = base64.b64decode(image_data)
                        image = Image.open(io.BytesIO(image_bytes))
                        st.image(image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–æ–∫—Å–∞–º–∏", use_column_width=True)
        else:
            error_detail = response.json().get("detail", response.text)
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")
    except Exception as e:
        st.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
if st.sidebar.button("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"):
    try:
        response = requests.get("http://127.0.0.1:8000/")
        if response.status_code == 200:
            st.sidebar.success(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.json().get('status')}")
        else:
            st.sidebar.error(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
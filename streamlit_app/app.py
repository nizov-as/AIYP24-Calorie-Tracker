import streamlit as st
import requests
from PIL import Image
import io
import base64
import json
from streamlit_lottie import st_lottie
import time  # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
import logging
from logging.handlers import RotatingFileHandler
import os

BASE_URL = "http://127.0.0.1:8000/api/v1/models"

log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = os.path.join(log_dir, "app.log")
logger = logging.getLogger("CalorieTracker")
logger.setLevel(logging.INFO)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
if not logger.handlers:
    handler = RotatingFileHandler(
        LOG_FILE,
        maxBytes=5 * 1024 * 1024,
        backupCount=3
    )
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
    <style>
        .title {
            font-size: 40px;
            font-weight: bold;
            color: #9dcf86;
            text-align: center;
            margin-top: 20px;
        }
        .subheader {
            font-size: 24px;
            color: #639149;
            font-weight: bold;
            text-align: center;
        }
        .sidebar .sidebar-content {
            background-color: #e1fcef;
        }
        .stButton>button {
            background-color: #255e48;
            color: white;
            font-size: 16px;
            border-radius: 10px;
            padding: 10px;
            transition: background-color 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #5F9EA0;
        }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
title = "üçΩÔ∏è Calorie-Tracker üçΩÔ∏è"
st.markdown(f'<p class="title">{title}</p>', unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
def load_lottie_from_file(filepath: str):
    with open(filepath, "r") as f:
        return json.load(f)


lottie_animation = load_lottie_from_file("Animation.json")
st_lottie(lottie_animation, height=200)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.markdown(
    '<h2 class="subheader">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</h2>',
    unsafe_allow_html=True
)

# –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ EDA
if "eda_completed" not in st.session_state:
    st.session_state["eda_completed"] = False

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ EDA
eda_placeholder = st.sidebar.empty()
if st.sidebar.button("üìä –ü—Ä–æ–≤–µ—Å—Ç–∏ EDA –¥–∞—Ç–∞—Å–µ—Ç–∞ UECFOOD256"):
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
        for i in range(100):
            time.sleep(0.03)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã))))
            eda_placeholder.progress(i + 1)
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è EDA
            response = requests.post(f"{BASE_URL}/eda")
            if response.status_code == 200:
                images = response.json().get("images", [])
                if images:
                    st.session_state["eda_images"] = images
                    st.session_state["eda_completed"] = True
                    st.sidebar.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!")
                    logger.info("EDA —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã.")
                else:
                    st.sidebar.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –≥—Ä–∞—Ñ–∏–∫–∏.")
                    logger.warning("EDA –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            else:
                error_detail = response.json().get("detail", response.text)
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è EDA: {error_detail}")
        except Exception as e:
            st.sidebar.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ EDA.")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
if st.sidebar.button("‚öôÔ∏è –î–æ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å YOLO –Ω–∞ –¥–≤—É—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö ))"):
    with st.spinner("–î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
        try:
            response = requests.post(
                f"{BASE_URL}/fit", json={"model_id": 'detect'}
            )
            if response.status_code == 200:
                message = response.json().get(
                    "message",
                    "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–æ–±—É—á–µ–Ω–∞!"
                )
                st.sidebar.success(f"‚úÖ {message}")
                logger.info("–î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLO —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            else:
                error_detail = response.json().get("detail", response.text)
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {error_detail}")
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {error_detail}")
        except Exception as e:
            st.sidebar.error(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}"
            )
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ YOLO.")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
if st.sidebar.button("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"):
    try:
        response = requests.get("http://127.0.0.1:8000/")
        if response.status_code == 200:
            st.sidebar.success(
                f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.json().get('status', 'OK')}"
            )
            logger.info("–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        else:
            st.sidebar.error(
                f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            )
            logger.error(
                f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}"
            )
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.")

# –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
# –í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
st.markdown('<h2 class="subheader">–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</h2>', unsafe_allow_html=True)
models = {
    "detect": "–ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (YOLO).",
    "classific": "–ú–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (InceptionV3).",
    "custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –¥–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å."
}

selected_model = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
    options=list(models.keys()),
    format_func=lambda x: f"{x.capitalize()} - {models[x]}"
)

if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
    with st.spinner(
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {selected_model}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    ):
        try:
            response = requests.post(
                f"{BASE_URL}/load", params={"model_id": selected_model}
            )
            if response.status_code == 200:
                st.success(f"‚úÖ –ú–æ–¥–µ–ª—å '{selected_model}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                logger.info(f"–ú–æ–¥–µ–ª—å {selected_model} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            else:
                st.error(
                    f"‚ùå –û—à–∏–±–∫–∞: {response.json().get(
                        'detail',
                        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                    )}"
                )
                logger.error(
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {selected_model}: {response.text}"
                )
        except Exception as e:
            st.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ {selected_model}.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
st.markdown(
    '<h2 class="subheader">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</h2>',
    unsafe_allow_html=True
)
uploaded_files = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=True
)

if uploaded_files and st.button("üîç –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    files = [
        ("images", (file.name, file.getvalue(), file.type))
        for file in uploaded_files
    ]
    try:
        response = requests.post(
            f"{BASE_URL}/predict",
            params={"model_id": selected_model},
            files=files
        )
        if response.status_code == 200:
            predictions = response.json().get("predictions", [])
            if not predictions:
                st.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
                logger.warning("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            else:
                st.markdown(
                    '<h2 class="subheader">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:</h2>',
                    unsafe_allow_html=True
                )
                for pred in predictions:
                    if "class" in pred and "confidence" in pred:
                        st.write(f"**–ö–ª–∞—Å—Å:** {pred['class']}")
                        st.write(
                            f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pred['confidence'] * 100:.2f}%"
                        )
                    if "image" in pred:
                        image_data = pred["image"]
                        image_bytes = base64.b64decode(image_data)
                        image = Image.open(io.BytesIO(image_bytes))
                        st.image(
                            image,
                            caption="–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–æ–∫—Å–∞–º–∏",
                            use_column_width=True
                        )
                logger.info("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.")
        else:
            st.error(
                f"‚ùå –û—à–∏–±–∫–∞: {response.json().get(
                    'detail',
                    '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.text}")
    except Exception as e:
        st.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")

# –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ EDA, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
if st.session_state["eda_completed"]:
    show_graphs = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ EDA", value=True)

    if show_graphs:
        for idx, img_base64 in enumerate(
            st.session_state.get("eda_images", [])
        ):
            image_bytes = base64.b64decode(img_base64)
            image = Image.open(io.BytesIO(image_bytes))
            st.image(image, caption=f"–ì—Ä–∞—Ñ–∏–∫ {idx + 1}", use_column_width=True)
        logger.info("–ì—Ä–∞—Ñ–∏–∫–∏ EDA —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.")
